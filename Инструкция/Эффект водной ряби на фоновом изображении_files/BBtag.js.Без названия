var edButtons = new Array();
var edOpenTags = new Array();
var extendedStart = edButtons.length;
var counteditToolBar = 0;
function edButton(id, show, display, tagStart, tagEnd, access, open) {
	this.id = id;				// used to name the toolbar button
	this.show = show;		// label on button
	this.display = display;		// label on button	
	this.tagStart = tagStart; 	// open tag
	this.tagEnd = tagEnd;		// close tag
	this.access = access;			// set to -1 if tag does not need to be closed
	this.open = open;			// set to -1 if tag does not need to be closed
}

edButtons.push(
new edButton(
'ed_bold'
,'Жирный текст'
,'b'		
,'[b]'
,'[/b]'
,'b'
)
);

edButtons.push(
new edButton(
'ed_italic'
,'Наклонный текст'
,'i'		
,'[i]'
,'[/i]'
,'i'
)
);


edButtons.push(
new edButton(
'ed_u'
,'Подчеркнутый текст'
,'u'		
,'[u]'
,'[/u]'
,'u'
)
);

edButtons.push(
new edButton(
'ed_s'
,'Зачеркнутый текст'
,'del'		
,'[del]'
,'[/del]'
,'s'
)
);

edButtons.push(
new edButton(
'ed_green'
,'Зеленый текст'
,'&bull;'		
,'[green]'
,'[/green]'
,'g'
)
);
edButtons.push(
new edButton(
'ed_blue'
,'Синий текст'
,'&bull;'		
,'[blue]'
,'[/blue]'
,'bl'
)
);
edButtons.push(
new edButton(
'ed_red'
,'Красный текст'
,'&bull;'		
,'[red]'
,'[/red]'
,'r'
)
);



edButtons.push(
new edButton(
'ed_small'
,'Маленький текст'
,'маленький'		
,'[small]'
,'[/small]'
,'sm'
)
);
edButtons.push(
new edButton(
'ed_big'
,'Большой текст'
,'большой'		
,'[big]'
,'[/big]'
,'big'
)
);
edButtons.push(
new edButton(
'ed_img'
,'Вставить изображение'
,'картинка'		
,''
,''
,'img'
)
);
edButtons.push(
new edButton(
'ed_url'
,'Вставить ссылку'
,'ссылка'		
,''
,''
,'url'
)
);
edButtons.push(
new edButton(
'ed_quote'
,'Вставить цитату'
,'цитата'		
,'[quote]'
,'[/quote]'
,'q'
)
);
edButtons.push(
new edButton(
'ed_code'
,'Вставить код'
,'код'		
,'[code]'
,'[/code]'
,'cod'
)
);


function editInsertImage(myField)
{
	var myValue = prompt('Ссылка на изображение:', 'http://');
	if (myValue) {
		myValue = '[img]'
		+ myValue
		+ '[/img]';
		editInsertContent(myField, myValue);
	}
}
function editInsertLink(myField)
{
	var URL = prompt('Вставить ссылку:', 'http://');
	if (URL) {
		URL = '[url="'
		+ URL
		+ '"]' + prompt('Название ссылки:', 'ссылка')
		+ '[/url]';
		editInsertContent(myField, URL);
	}
}
function edShowButton(button, i) {
var el = document.getElementById('edToolbar');	
	sep = '_' + counteditToolBar;
	if (button.access) {
		var accesskey = ' accesskey = "' + button.access + '"'
	}
	else {
		var accesskey = '';
	}
	
	switch (button.id) {
			
		default:
		
		if (button.id == 'ed_img') {
			el.innerHTML += '<input data-toggle="tooltip" data-placement="bottom" title="' + button.show + '" type="button" id="' + button.id + sep +'" ' + accesskey + ' class="BBbut ed_button" onclick="editInsertImage(edCanvas'+ sep +');" value="' + button.display + '"  />';		
			} else if (button.id == 'ed_url') {
			el.innerHTML += '<input data-toggle="tooltip" data-placement="bottom" title="' + button.show + '" type="button" id="' + button.id + sep +'" ' + accesskey + ' class="BBbut ed_button" onclick="editInsertLink(edCanvas'+ sep +', ' + i + ', ' + counteditToolBar + ');" value="' + button.display + '" />';
			} else {		
			el.innerHTML += '<input data-toggle="tooltip" data-placement="bottom" title="' + button.show + '" type="button" id="' + button.id + sep +'" ' + accesskey + ' class="BBbut ed_button" onclick="edInsertTag(edCanvas'+ sep +', ' + i + ', ' + counteditToolBar + ');" value="' + button.display + '"  />';	
		} 
		break;	
	}
}

function edAddTag(button, number) {
	
	sep = '_' + number;
	if (edButtons[button].tagEnd != '') {
		
		edOpenTags[edOpenTags.length] = button;
		document.getElementById(edButtons[button].id + sep).value = '/ ' + document.getElementById(edButtons[button].id + sep).value;
	}
}

function edRemoveTag(button, number) {
	
	sep = '_' + number;
	for (i = 0; i < edOpenTags.length; i++) {
		if (edOpenTags[i] == button) {
			edOpenTags.splice(i, 1);
			document.getElementById(edButtons[button].id + sep).value = 	document.getElementById(edButtons[button].id + sep).value.replace('/ ', '');
		}
	}
}

function edCheckOpenTags(button) {
	var tag = 0;
	for (i = 0; i < edOpenTags.length; i++) {
		if (edOpenTags[i] == button) {
			tag++;
		}
	}
	if (tag > 0) {
		return true; // tag found
	}
	else {
		return false; // tag not found
	}
}

function edInsertTag(myField, i, number) {
	//IE support
	if (document.selection) {
		myField.focus();
	    sel = document.selection.createRange();
		if (sel.text.length > 0) {
			sel.text = edButtons[i].tagStart + sel.text + edButtons[i].tagEnd;
		}
		else {
			if (!edCheckOpenTags(i) || edButtons[i].tagEnd == '') {
				sel.text = edButtons[i].tagStart;
				edAddTag(i, number);
			}
			else {
				sel.text = edButtons[i].tagEnd;
				edRemoveTag(i, number);
			}
		}
		myField.focus();
	}
	//MOZILLA/NETSCAPE support
	else if (myField.selectionStart || myField.selectionStart == '0') {
		var startPos = myField.selectionStart;
		var endPos = myField.selectionEnd;
		var cursorPos = endPos;
		var scrollTop = myField.scrollTop;
		if (startPos != endPos) {
			myField.value = myField.value.substring(0, startPos)
			+ edButtons[i].tagStart
			+ myField.value.substring(startPos, endPos)
			+ edButtons[i].tagEnd
			+ myField.value.substring(endPos, myField.value.length);
			cursorPos += edButtons[i].tagStart.length + edButtons[i].tagEnd.length;
		}
		else {
			if (!edCheckOpenTags(i) || edButtons[i].tagEnd == '') {
				myField.value = myField.value.substring(0, startPos)
				+ edButtons[i].tagStart
				+ myField.value.substring(endPos, myField.value.length);
				edAddTag(i, number);
				cursorPos = startPos + edButtons[i].tagStart.length;
			}
			else {
				myField.value = myField.value.substring(0, startPos)
				+ edButtons[i].tagEnd
				+ myField.value.substring(endPos, myField.value.length);
				edRemoveTag(i, number);
				cursorPos = startPos + edButtons[i].tagEnd.length;
			}
		}
		myField.focus();
		myField.selectionStart = cursorPos;
		myField.selectionEnd = cursorPos;
		myField.scrollTop = scrollTop;
	}
	else {
		if (!edCheckOpenTags(i) || edButtons[i].tagEnd == '') {
			myField.value += edButtons[i].tagStart;
			edAddTag(i, number);
		}
		else {
			myField.value += edButtons[i].tagEnd;
			edRemoveTag(i, number);
		}
		myField.focus();
	}
}

function editInsertContent(myField, myValue)
{
	//IE support
	if (document.selection)
	{
		myField.focus();
		sel = document.selection.createRange();
		sel.text = myValue;
		myField.focus();
	}
	//MOZILLA/NETSCAPE support
	else if (myField.selectionStart || myField.selectionStart == '0')
	{
		var startPos = myField.selectionStart;
		var endPos = myField.selectionEnd;
		myField.value = myField.value.substring(0, startPos)
		+ myValue
		+ myField.value.substring(endPos, myField.value.length);
		myField.focus();
		myField.selectionStart = startPos + myValue.length;
		myField.selectionEnd = startPos + myValue.length;
	}
	else
	{
		myField.value += myValue;
		myField.focus();
	}
}

var edCanvas_1 = document.getElementById("comess");
	counteditToolBar++;
	sep = '_' + counteditToolBar;
	for (i = 0; i < extendedStart; i++) {
		edShowButton(edButtons[i], i);
	}
	for (i = extendedStart; i < edButtons.length; i++) {
		edShowButton(edButtons[i], i);
	}

